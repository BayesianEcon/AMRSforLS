// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// procrustes_cpp
NumericMatrix procrustes_cpp(NumericMatrix X, NumericMatrix Y);
RcppExport SEXP _AMRSforLS_procrustes_cpp(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(procrustes_cpp(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_ADRS_AD
List MCMC_ADRS_AD(NumericMatrix y, double beta, double beta_a, double beta_b, NumericMatrix z_i, double zeta_a, double zeta_b, NumericVector lam_ad_z, NumericMatrix mu_mat_z, List Sigma_ad_z, int N, int K, double prop_sigma_beta, double acc_target_z, int scan_every, double Iterations, double k_shift, double eq_option, double eq_prob, double ad_option, double distr_option);
RcppExport SEXP _AMRSforLS_MCMC_ADRS_AD(SEXP ySEXP, SEXP betaSEXP, SEXP beta_aSEXP, SEXP beta_bSEXP, SEXP z_iSEXP, SEXP zeta_aSEXP, SEXP zeta_bSEXP, SEXP lam_ad_zSEXP, SEXP mu_mat_zSEXP, SEXP Sigma_ad_zSEXP, SEXP NSEXP, SEXP KSEXP, SEXP prop_sigma_betaSEXP, SEXP acc_target_zSEXP, SEXP scan_everySEXP, SEXP IterationsSEXP, SEXP k_shiftSEXP, SEXP eq_optionSEXP, SEXP eq_probSEXP, SEXP ad_optionSEXP, SEXP distr_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_a(beta_aSEXP);
    Rcpp::traits::input_parameter< double >::type beta_b(beta_bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_a(zeta_aSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_b(zeta_bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam_ad_z(lam_ad_zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_mat_z(mu_mat_zSEXP);
    Rcpp::traits::input_parameter< List >::type Sigma_ad_z(Sigma_ad_zSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sigma_beta(prop_sigma_betaSEXP);
    Rcpp::traits::input_parameter< double >::type acc_target_z(acc_target_zSEXP);
    Rcpp::traits::input_parameter< int >::type scan_every(scan_everySEXP);
    Rcpp::traits::input_parameter< double >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< double >::type k_shift(k_shiftSEXP);
    Rcpp::traits::input_parameter< double >::type eq_option(eq_optionSEXP);
    Rcpp::traits::input_parameter< double >::type eq_prob(eq_probSEXP);
    Rcpp::traits::input_parameter< double >::type ad_option(ad_optionSEXP);
    Rcpp::traits::input_parameter< double >::type distr_option(distr_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_ADRS_AD(y, beta, beta_a, beta_b, z_i, zeta_a, zeta_b, lam_ad_z, mu_mat_z, Sigma_ad_z, N, K, prop_sigma_beta, acc_target_z, scan_every, Iterations, k_shift, eq_option, eq_prob, ad_option, distr_option));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_ADRS_BLOCK_AD
List MCMC_ADRS_BLOCK_AD(NumericMatrix y, double beta, double beta_a, double beta_b, NumericMatrix z_i, double zeta_a, double zeta_b, NumericVector lam_ad_z, NumericMatrix mu_mat_z, List Sigma_ad_z, int N, int K, double prop_sigma_beta, double acc_target_z, NumericVector belong, int scan_every, double Iterations, double k_shift, double ad_option, double eq_option, double distr_option);
RcppExport SEXP _AMRSforLS_MCMC_ADRS_BLOCK_AD(SEXP ySEXP, SEXP betaSEXP, SEXP beta_aSEXP, SEXP beta_bSEXP, SEXP z_iSEXP, SEXP zeta_aSEXP, SEXP zeta_bSEXP, SEXP lam_ad_zSEXP, SEXP mu_mat_zSEXP, SEXP Sigma_ad_zSEXP, SEXP NSEXP, SEXP KSEXP, SEXP prop_sigma_betaSEXP, SEXP acc_target_zSEXP, SEXP belongSEXP, SEXP scan_everySEXP, SEXP IterationsSEXP, SEXP k_shiftSEXP, SEXP ad_optionSEXP, SEXP eq_optionSEXP, SEXP distr_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_a(beta_aSEXP);
    Rcpp::traits::input_parameter< double >::type beta_b(beta_bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_a(zeta_aSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_b(zeta_bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam_ad_z(lam_ad_zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_mat_z(mu_mat_zSEXP);
    Rcpp::traits::input_parameter< List >::type Sigma_ad_z(Sigma_ad_zSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sigma_beta(prop_sigma_betaSEXP);
    Rcpp::traits::input_parameter< double >::type acc_target_z(acc_target_zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type belong(belongSEXP);
    Rcpp::traits::input_parameter< int >::type scan_every(scan_everySEXP);
    Rcpp::traits::input_parameter< double >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< double >::type k_shift(k_shiftSEXP);
    Rcpp::traits::input_parameter< double >::type ad_option(ad_optionSEXP);
    Rcpp::traits::input_parameter< double >::type eq_option(eq_optionSEXP);
    Rcpp::traits::input_parameter< double >::type distr_option(distr_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_ADRS_BLOCK_AD(y, beta, beta_a, beta_b, z_i, zeta_a, zeta_b, lam_ad_z, mu_mat_z, Sigma_ad_z, N, K, prop_sigma_beta, acc_target_z, belong, scan_every, Iterations, k_shift, ad_option, eq_option, distr_option));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_AD
List MCMC_AD(NumericMatrix y, double beta, double beta_a, double beta_b, NumericMatrix z_i, double zeta_a, double zeta_b, NumericVector lam_ad_z, NumericMatrix mu_mat_z, List Sigma_ad_z, int N, int K, double prop_sigma_beta, double acc_target_z, double Iterations, double ad_option, double distr_option);
RcppExport SEXP _AMRSforLS_MCMC_AD(SEXP ySEXP, SEXP betaSEXP, SEXP beta_aSEXP, SEXP beta_bSEXP, SEXP z_iSEXP, SEXP zeta_aSEXP, SEXP zeta_bSEXP, SEXP lam_ad_zSEXP, SEXP mu_mat_zSEXP, SEXP Sigma_ad_zSEXP, SEXP NSEXP, SEXP KSEXP, SEXP prop_sigma_betaSEXP, SEXP acc_target_zSEXP, SEXP IterationsSEXP, SEXP ad_optionSEXP, SEXP distr_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_a(beta_aSEXP);
    Rcpp::traits::input_parameter< double >::type beta_b(beta_bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_a(zeta_aSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_b(zeta_bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam_ad_z(lam_ad_zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_mat_z(mu_mat_zSEXP);
    Rcpp::traits::input_parameter< List >::type Sigma_ad_z(Sigma_ad_zSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sigma_beta(prop_sigma_betaSEXP);
    Rcpp::traits::input_parameter< double >::type acc_target_z(acc_target_zSEXP);
    Rcpp::traits::input_parameter< double >::type Iterations(IterationsSEXP);
    Rcpp::traits::input_parameter< double >::type ad_option(ad_optionSEXP);
    Rcpp::traits::input_parameter< double >::type distr_option(distr_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_AD(y, beta, beta_a, beta_b, z_i, zeta_a, zeta_b, lam_ad_z, mu_mat_z, Sigma_ad_z, N, K, prop_sigma_beta, acc_target_z, Iterations, ad_option, distr_option));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AMRSforLS_procrustes_cpp", (DL_FUNC) &_AMRSforLS_procrustes_cpp, 2},
    {"_AMRSforLS_MCMC_ADRS_AD", (DL_FUNC) &_AMRSforLS_MCMC_ADRS_AD, 21},
    {"_AMRSforLS_MCMC_ADRS_BLOCK_AD", (DL_FUNC) &_AMRSforLS_MCMC_ADRS_BLOCK_AD, 21},
    {"_AMRSforLS_MCMC_AD", (DL_FUNC) &_AMRSforLS_MCMC_AD, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_AMRSforLS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
